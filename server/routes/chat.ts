import express from "express";
import { z } from "zod";
import OpenAI from "openai";

const router = express.Router();

// Configurar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Schema de valida√ß√£o
const chatSchema = z.object({
  message: z.string().min(1, "Mensagem n√£o pode estar vazia"),
  userInfo: z
    .object({
      nome: z.string().optional(),
      telefone: z.string().optional(),
      email: z.string().optional(),
    })
    .optional(),
  context: z.string().default("website"),
  leadId: z.number().optional(),
});

// Dados espec√≠ficos da imobili√°ria para contexto da IA
const empresaContext = {
  nome: "Siqueira Campos Im√≥veis",
  cidade: "Goi√¢nia",
  estado: "Goi√°s",
  proprietario: "Juarez",
  whatsapp: "(62) 9 8556-3505",
  instagram: "@imoveissiqueiracampos",
  email: "SiqueiraCamposImoveisGoiania@gmail.com",
  experiencia: "Mais de 10 anos no mercado imobili√°rio goiano",

  regioes: [
    "Setor Oeste", "Jardim Goi√°s", "Setor Marista", "Setor Campinas",
    "Centro", "Setor Bueno", "Vila Nova", "Setor Sul", "Setor Pedro Ludovico",
    "Park Lozandes", "Setor Coimbra", "Cidade Jardim", "Goi√¢nia 2",
    "Regi√£o Noroeste", "Setor Universit√°rio", "Setor Aeroporto"
  ],

  tiposImoveis: [
    "Apartamentos de 1 a 4 quartos", "Casas t√©rreas e sobrados",
    "Casas de condom√≠nio", "Salas comerciais", "Lojas",
    "Galp√µes industriais", "Terrenos residenciais", "Terrenos comerciais",
    "Ch√°caras de recreio", "Lofts e est√∫dios"
  ],

  faixasPreco: {
    entrada: "R$ 120.000 - R$ 200.000 (ideal para primeiro im√≥vel)",
    popular: "R$ 200.000 - R$ 400.000 (mais procurado)",
    medio: "R$ 400.000 - R$ 700.000 (bom padr√£o)",
    alto: "R$ 700.000 - R$ 1.500.000 (alto padr√£o)",
    luxo: "Acima de R$ 1.500.000 (im√≥veis de luxo)"
  },

  servicos: [
    "Venda de im√≥veis residenciais e comerciais",
    "Loca√ß√£o residencial e comercial",
    "Avalia√ß√£o gratuita de im√≥veis",
    "Consultoria em investimentos imobili√°rios",
    "Acompanhamento jur√≠dico completo",
    "Assessoria em financiamento",
    "Administra√ß√£o predial",
    "Regulariza√ß√£o de documentos"
  ],

  caracteristicasRegionais: {
    "Setor Oeste": "Regi√£o nobre, apartamentos de alto padr√£o, excelente infraestrutura, pr√≥ximo a shoppings",
    "Jardim Goi√°s": "√Årea residencial em expans√£o, casas e sobrados, √≥timo para fam√≠lias, condom√≠nios fechados",
    "Setor Marista": "Tradicional, pr√≥ximo a universidades, mix de apartamentos e casas, boa valoriza√ß√£o",
    "Centro": "Regi√£o comercial, apartamentos compactos, boa mobilidade urbana, ideal para investimento",
    "Setor Campinas": "Tradicional, variedade de im√≥veis, bem localizado, f√°cil acesso ao centro",
    "Setor Bueno": "Consolidado, apartamentos de m√©dio padr√£o, boa infraestrutura",
    "Vila Nova": "Residencial, casas t√©rreas, tranquilo, pre√ßos acess√≠veis"
  }
};

// Sistema de prompt para a IA
const getSystemPrompt = () => {
  return `Voc√™ √© Sofia, assistente virtual especializada da ${empresaContext.nome}, a principal imobili√°ria de ${empresaContext.cidade}, ${empresaContext.estado}.

üè¢ INFORMA√á√ïES DA EMPRESA:
- Propriet√°rio: ${empresaContext.proprietario}
- ${empresaContext.experiencia}
- WhatsApp: ${empresaContext.whatsapp}
- Instagram: ${empresaContext.instagram}
- Email: ${empresaContext.email}

üó∫Ô∏è REGI√ïES QUE ATENDEMOS EM GOI√ÇNIA:
${empresaContext.regioes.join(" ‚Ä¢ ")}

üè† TIPOS DE IM√ìVEIS DISPON√çVEIS:
${empresaContext.tiposImoveis.map(t => `‚Ä¢ ${t}`).join('\n')}

üí∞ FAIXAS DE PRE√áO (2024):
‚Ä¢ Entrada: ${empresaContext.faixasPreco.entrada}
‚Ä¢ Popular: ${empresaContext.faixasPreco.popular}
‚Ä¢ M√©dio: ${empresaContext.faixasPreco.medio}
‚Ä¢ Alto: ${empresaContext.faixasPreco.alto}
‚Ä¢ Luxo: ${empresaContext.faixasPreco.luxo}

üéØ SEUS OBJETIVOS PRINCIPAIS:
1. ü§ù Atender com excel√™ncia clientes interessados em comprar, vender ou alugar
2. üìã Coletar informa√ß√µes essenciais: nome, telefone, tipo de im√≥vel, or√ßamento, regi√£o
3. üí° Sugerir im√≥veis e regi√µes compat√≠veis com o perfil do cliente
4. üìÖ Agendar visitas aos im√≥veis de interesse
5. üë• Conectar com nossos corretores especialistas
6. üí∞ Orientar sobre financiamento e processos

üìç CONHECIMENTO DAS REGI√ïES:
${Object.entries(empresaContext.caracteristicasRegionais).map(([regiao, desc]) =>
  `‚Ä¢ ${regiao}: ${desc}`
).join('\n')}

üé® DIRETRIZES DE ATENDIMENTO:
- Seja sempre cordial, prestativa e proativa
- Use emojis moderadamente para ser mais amig√°vel
- Fa√ßa perguntas inteligentes para entender necessidades
- Qualifique leads coletando nome, telefone, tipo de im√≥vel e or√ßamento
- Forne√ßa informa√ß√µes precisas sobre Goi√¢nia e mercado local
- Se n√£o souber algo espec√≠fico, seja transparente e ofere√ßa contato direto
- Mantenha foco em im√≥veis e assuntos relacionados
- Use linguagem acess√≠vel e natural
- Demonstre conhecimento do mercado local

üí™ NOSSOS DIFERENCIAIS:
‚Ä¢ Mais de 10 anos de experi√™ncia em Goi√¢nia
‚Ä¢ Equipe especializada por regi√£o da cidade
‚Ä¢ Atendimento personalizado e humanizado
‚Ä¢ Processo 100% transparente e seguro
‚Ä¢ Suporte completo da visita √† escritura
‚Ä¢ Parcerias com principais bancos para financiamento
‚Ä¢ Avalia√ß√£o gratuita de im√≥veis

Sempre busque qualificar o cliente e conect√°-lo com nossa equipe! Seja a ponte entre o sonho do cliente e o im√≥vel ideal! üè°‚ú®`;
- Coberturas
- Kitnets e Lofts

SERVI√áOS OFERECIDOS:
- Venda de im√≥veis
- Loca√ß√£o de im√≥veis
- Avalia√ß√£o gratuita
- Consultoria imobili√°ria
- Financiamento imobili√°rio
- Documenta√ß√£o completa

COMPORTAMENTO:
- Seja sempre cordial, profissional e prestativa
- Use linguagem clara e acess√≠vel
- Fa√ßa perguntas para entender melhor as necessidades
- Ofere√ßa solu√ß√µes personalizadas
- Mantenha foco em gerar leads qualificados
- Se n√£o souber uma informa√ß√£o espec√≠fica, seja honesta e ofere√ßa contato direto

QUANDO ENCAMINHAR PARA CORRETOR:
- Cliente demonstra interesse real em comprar/alugar
- Solicita visita a im√≥vel espec√≠fico
- Quer informa√ß√µes sobre financiamento
- Precisa de avalia√ß√£o de im√≥vel
- Tem d√∫vidas t√©cnicas espec√≠ficas

MENSAGENS IMPORTANTES:
- Sempre mencione que temos corretores especializados dispon√≠veis
- Ofere√ßa contato via WhatsApp para urg√™ncias: (62) 9 8556-3505
- Mantenha o tom profissional mas amig√°vel
- Use emojis moderadamente para humanizar a conversa

Responda de forma √∫til, direta e sempre dentro do contexto imobili√°rio da Siqueira Campos Im√≥veis.`;
};

// POST /api/chat - Processar mensagem do chat
router.post("/", async (req, res) => {
  try {
    const { message, userInfo, context, leadId } = chatSchema.parse(req.body);

    // Preparar contexto da conversa
    let contextMessage = `Cliente escreveu: "${message}"`;

    if (userInfo) {
      contextMessage += `\n\nInforma√ß√µes do cliente:`;
      if (userInfo.nome) contextMessage += `\n- Nome: ${userInfo.nome}`;
      if (userInfo.telefone)
        contextMessage += `\n- Telefone: ${userInfo.telefone}`;
      if (userInfo.email) contextMessage += `\n- Email: ${userInfo.email}`;
    }

    // Se h√° um lead associado, buscar mais contexto
    if (leadId && req.prisma) {
      const lead = await req.prisma.lead.findUnique({
        where: { id: leadId },
        include: {
          imovel: {
            select: {
              titulo: true,
              endereco: true,
              preco: true,
              tipo: true,
            },
          },
        },
      });

      if (lead && lead.imovel) {
        contextMessage += `\n\nIm√≥vel de interesse:
- ${lead.imovel.titulo}
- ${lead.imovel.endereco}
- Tipo: ${lead.imovel.tipo}
- Pre√ßo: R$ ${lead.imovel.preco.toLocaleString()}`;
      }
    }

    // Gerar resposta com OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: getSystemPrompt(),
        },
        {
          role: "user",
          content: contextMessage,
        },
      ],
      max_tokens: 500,
      temperature: 0.7,
    });

    const response = completion.choices[0]?.message?.content;

    if (!response) {
      throw new Error("N√£o foi poss√≠vel gerar resposta");
    }

    // Analisar se deve criar/atualizar lead
    const shouldCreateLead = analyzeLeadIntent(message, response);

    let leadData = null;

    if (shouldCreateLead && userInfo?.nome && userInfo?.telefone) {
      // Verificar se j√° existe lead para este telefone hoje
      const existingLead = await req.prisma?.lead.findFirst({
        where: {
          telefone: userInfo.telefone,
          criadoEm: {
            gte: new Date(new Date().setHours(0, 0, 0, 0)),
          },
        },
      });

      if (!existingLead) {
        // Criar novo lead
        leadData = await req.prisma?.lead.create({
          data: {
            nome: userInfo.nome,
            telefone: userInfo.telefone,
            email: userInfo.email,
            mensagem: message,
            origem: "chat_website",
            status: "PENDENTE",
            respostaIa: response,
          },
        });

        // Enviar lead para N8N (webhook)
        if (process.env.N8N_WEBHOOK_URL) {
          try {
            await fetch(`${process.env.N8N_WEBHOOK_URL}/lead-site`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                nome: userInfo.nome,
                telefone: userInfo.telefone,
                mensagem: message,
                leadId: leadData?.id,
              }),
            });
          } catch (webhookError) {
            console.error("Erro ao enviar para N8N:", webhookError);
          }
        }
      }
    }

    // Log da conversa
    if (req.prisma && userInfo?.telefone) {
      await req.prisma.atividade.create({
        data: {
          tipo: "chat_ia",
          descricao: `Chat com IA - ${userInfo.nome || "An√¥nimo"}`,
          dados: {
            message,
            response,
            userInfo,
            leadCreated: !!leadData,
          },
          ip: req.ip,
          userAgent: req.get("User-Agent"),
        },
      });
    }

    res.json({
      response,
      leadCreated: !!leadData,
      leadId: leadData?.id,
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: error.errors[0].message });
    }

    console.error("Erro no chat:", error);

    // Resposta de fallback
    res.json({
      response:
        "Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, entre em contato diretamente pelo WhatsApp (62) 9 8556-3505 ou continue navegando em nosso site para conhecer nossos im√≥veis.",
      leadCreated: false,
    });
  }
});

// Fun√ß√£o para analisar se deve criar um lead
function analyzeLeadIntent(message: string, aiResponse: string): boolean {
  const leadKeywords = [
    "quero",
    "gostaria",
    "interesse",
    "comprar",
    "alugar",
    "financiar",
    "visita",
    "ver",
    "conhecer",
    "apartamento",
    "casa",
    "terreno",
    "comercial",
    "quanto custa",
    "pre√ßo",
    "valor",
    "dispon√≠vel",
    "contato",
    "corretor",
    "agendar",
  ];

  const messageWords = message.toLowerCase();
  const hasIntent = leadKeywords.some((keyword) =>
    messageWords.includes(keyword),
  );

  // Tamb√©m analisar se a IA sugeriu contato com corretor
  const aiSuggestedContact = aiResponse
    .toLowerCase()
    .includes("corretor" || "contato" || "whatsapp" || "agendar");

  return hasIntent || aiSuggestedContact;
}

// GET /api/chat/history/:telefone - Hist√≥rico de conversas
router.get("/history/:telefone", async (req, res) => {
  try {
    const { telefone } = req.params;

    if (!req.prisma) {
      return res.status(500).json({ error: "Banco de dados indispon√≠vel" });
    }

    const historico = await req.prisma.atividade.findMany({
      where: {
        tipo: "chat_ia",
        dados: {
          path: ["userInfo", "telefone"],
          equals: telefone,
        },
      },
      orderBy: { criadoEm: "asc" },
      take: 50, // Limitar √∫ltimas 50 mensagens
    });

    const conversas = historico.map((atividade) => ({
      id: atividade.id,
      timestamp: atividade.criadoEm,
      message: atividade.dados?.message,
      response: atividade.dados?.response,
      userInfo: atividade.dados?.userInfo,
    }));

    res.json(conversas);
  } catch (error) {
    console.error("Erro ao buscar hist√≥rico:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});

// POST /api/chat/feedback - Feedback sobre a resposta da IA
router.post("/feedback", async (req, res) => {
  try {
    const { messageId, rating, comment } = req.body;

    if (!req.prisma) {
      return res.status(500).json({ error: "Banco de dados indispon√≠vel" });
    }

    // Salvar feedback
    await req.prisma.atividade.create({
      data: {
        tipo: "chat_feedback",
        descricao: `Feedback do chat - Nota: ${rating}`,
        dados: {
          messageId,
          rating,
          comment,
        },
        ip: req.ip,
        userAgent: req.get("User-Agent"),
      },
    });

    res.json({ message: "Feedback registrado com sucesso" });
  } catch (error) {
    console.error("Erro ao salvar feedback:", error);
    res.status(500).json({ error: "Erro interno do servidor" });
  }
});

export default router;