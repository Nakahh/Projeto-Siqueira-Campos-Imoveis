# Docker Compose para Produção - Siqueira Campos Imóveis
# Configuração otimizada para ambiente de produção

version: "3.8"

services:
  # Proxy Reverso Traefik
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/letsencrypt/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/letsencrypt:/letsencrypt
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Aplicação Principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: siqueira-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      RUN_MIGRATIONS: "true"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - web
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=3001"

      # Subdomínios
      - "traefik.http.routers.admin.rule=Host(`admin.${DOMAIN}`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"

      - "traefik.http.routers.corretor.rule=Host(`corretor.${DOMAIN}`)"
      - "traefik.http.routers.corretor.tls=true"
      - "traefik.http.routers.corretor.tls.certresolver=letsencrypt"

      - "traefik.http.routers.cliente.rule=Host(`cliente.${DOMAIN}`)"
      - "traefik.http.routers.cliente.tls=true"
      - "traefik.http.routers.cliente.tls.certresolver=letsencrypt"

      - "traefik.http.routers.dev.rule=Host(`dev.${DOMAIN}`)"
      - "traefik.http.routers.dev.tls=true"
      - "traefik.http.routers.dev.tls.certresolver=letsencrypt"

      - "traefik.http.routers.mkt.rule=Host(`mkt.${DOMAIN}`)"
      - "traefik.http.routers.mkt.tls=true"
      - "traefik.http.routers.mkt.tls.certresolver=letsencrypt"
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Automação N8N
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
      WEBHOOK_URL: https://n8n.${DOMAIN}
      GENERIC_TIMEZONE: America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - web
      - internal
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # WhatsApp Evolution API
  evolution:
    image: atendai/evolution-api:latest
    container_name: evolution
    restart: unless-stopped
    environment:
      SERVER_TYPE: http
      CORS_ORIGIN: "*"
      CORS_METHODS: "POST,GET,PUT,DELETE"
      CORS_CREDENTIALS: "true"
      DEL_INSTANCE: "false"
      DATABASE_ENABLED: "true"
      DATABASE_CONNECTION_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_ENABLED: "true"
      REDIS_URI: redis://default:${REDIS_PASSWORD}@redis:6379
      AUTHENTICATION_API_KEY: ${EVOLUTION_API_KEY}
      AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES: "true"
      WEBHOOK_GLOBAL_URL: https://app.${DOMAIN}/api/whatsapp/webhook
      WEBHOOK_GLOBAL_ENABLED: "true"
      CONFIG_SESSION_PHONE_CLIENT: "Siqueira Campos"
      CONFIG_SESSION_PHONE_NAME: "Sistema"
    volumes:
      - evolution_data:/evolution/instances
    networks:
      - web
      - internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolution.rule=Host(`whatsapp.${DOMAIN}`)"
      - "traefik.http.routers.evolution.tls=true"
      - "traefik.http.routers.evolution.tls.certresolver=letsencrypt"
      - "traefik.http.services.evolution.loadbalancer.server.port=8080"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backup Automático
  backup:
    image: postgres:15-alpine
    container_name: backup
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    networks:
      - internal
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        apk add --no-cache bash &&
        chmod +x /scripts/backup.sh &&
        /scripts/backup.sh
      "
    profiles:
      - backup

  # Monitoramento
  monitor:
    image: node:18-alpine
    container_name: monitor
    restart: unless-stopped
    environment:
      WEBHOOK_URL: ${WEBHOOK_URL}
      ALERT_EMAIL: ${ALERT_EMAIL}
      AUTO_REPAIR: "true"
    volumes:
      - ./scripts:/scripts
      - ./logs:/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
    command: >
      sh -c "
        apk add --no-cache bash curl docker-cli &&
        chmod +x /scripts/monitor.sh &&
        /scripts/monitor.sh continuous
      "
    depends_on:
      - app
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  evolution_data:
    driver: local

networks:
  web:
    external: true
  internal:
    driver: bridge
